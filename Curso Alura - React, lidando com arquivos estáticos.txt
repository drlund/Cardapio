Curso Alura - React: lidando com arquivos estáticos

O node prioriza o uso do yarn quando se utiliza o npx no template para typescript, para utilizar o npm é necessário dar um aviso
ao comando com --use-npm para que seja utilizado o npm;

OBS.: ao rodar npm start dá um problema com ESlint: abra o arquivo package.json no VS Code e salve-o (ctrl+s), então funciona. Você pode precisar repetir esta etapa todas as vezes, um pouco irritante.

Configuração do tsconfig.json para setar o absolute import dentro de “compiler options” colocarndo uma opção chamada baseUrl;

Utiliza-se também o reset.css: https://www.alura.com.br/artigos/o-que-e-reset-css e substitui dentro do index.css;

{styles.filtros__filtro}: __ significa o uso do PEM;

O useEffect é o hook que faz alguma coisa, sempre que alguma coisa mudar. Poderia ser utilizado o useLayoutEffect, que renderiza inclusive antes do HTML, porém, só é necessário em casos, por emxemplo, de alteração da interface par dark mode,
light mode;

O primeiro parâmetro do useEffect é uma arrow function e o segundo parâmetro é um array de dependências, que pode ter parâmetros ou não;

1.1 - O que foi aprendido:

    - Importar um svg;
        Vimos como o webpack entende aquela string que fornecemos ao src da tag img e porque não funciona, então, aprendemos como importar um svg da forma correta.

    - Utilizar um svg como componente;
        Melhoramos a nossa logo alterando a tag img por um componente que se torna um svg no final.

    - Imports absolutos;
        Aprendemos como configurar e utilizar os imports absolutos para evitar voltar muitas pastas ao importar um arquivo.

    - Utilizar a biblioteca reset css para resetar o css;
        Resetamos os estilos da nossa página utilizando uma biblioteca chamada reset.css que nos ajuda a limpar os estilos padrões de cada elemento de acordo com cada navegador.

1.2 - O que foi aprendido:

    - Importar fontes externas
        Aprendemos como importar fontes externas no nosso projeto utilizando o google fonts.
    - Utilizar o normalize.css (biblioteca que deve ser instalada via npm ou yarn):
        Utilizamos o normalize.css para padronizar os estilos da página html em cada navegador.
    - Utilizar ícones
        Aprendemos como é fácil utilizar ícones com a biblioteca react-icons.
    - Ignorar arquivos para build (iniciando nome do arquivo com _ ):
        Vimos como ignorar arquivos no momentos de build para que sejam utilizados apenas quando os chamar.
    - Criar variáveis css
        Criamos variáveis css para nos auxiliar na padronização dos estilos da página, evitando repetição e facilitando na manutenção de código.

1.3 - O que aprendemos:

    - Inferir o tipo de um objeto:
        O operador typeof nos permite inferir a tipagem de um objeto sem a necessidade de criar uma interface. 
    - Manipulação de objetos:
        Utilizamos [] em volta do nome da chave de um objeto quando o valor da chave é dinâmico.
    - Biblioteca classnames (deve ser instalada pelo npm):
        Essa biblioteca nos permite concatenar classes CSS utilizando sintaxe de objetos.

1.4 - O que foi aprendido:

    - Renderizar uma lista de componentes
        Podemos utilizar o spread operator para não precisar passar as props manualmente quando temos total controle do componente.
    - Utilizar a pasta public
        Arquivos estáticos que devem ser referenciados dinamicamente precisam estar dentro dessa pasta.
    - Gerar os arquivos utilizados em produção (para ver os arquivos que realmente entram no aplicativo):
        Com o comando npm run build podemos verificar quais arquivos estarão presentes no ambiente de produção.

1.5 - Final:

    - Buscar com expressão regular
        Utilizar expressões regulares em buscas de textos.
    - Manipular elementos de uma lista
        Alterar a quantidade ou ordenar os elementos de uma lista com métodos filter e sort.
    - Tipar o useState
        Escrever useState<Tipo> para tipar o state e o setState.



